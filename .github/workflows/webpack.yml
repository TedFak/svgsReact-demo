name: NodeJS with Webpack

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Initialize Git repository
      run: |
        rm -rf .git
        rm -rf .gitignore 
        git init
        git remote add origin https://github.com/Mbyod/svgsReact-demo.git
        git fetch origin
        git pull origin main

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    
    - name: Install dependencies
      run: |
        npm install
        npm install -D webpack-cli  # Установка webpack-cli

    - name: Check installed packages
      run: npm list --depth=0

    - name: Run npm audit
      run: |
        npm audit --json || echo "npm audit failed"

    - name: Fix npm audit issues
      run: npm audit fix || echo "Could not fix all issues"

    - name: Build
      run: |
        npm install
        npx webpack
        npm run build

    - name: Set up SSH
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
      run: |
        mkdir -p ~/.ssh
        echo "${SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.REMOTE_HOST }} >> ~/.ssh/known_hosts

    - name: Remove old repo
      env:
        REMOTE_USER: ${{ secrets.REMOTE_USER }}
        REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
      run: |
        ssh ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} "rm -r /home/${{ secrets.REMOTE_USER }}/build && rm -r /home/${{ secrets.REMOTE_USER }}/docker && exit"
        
    - name: Copy build directory to remote server
      env:
        REMOTE_USER: ${{ secrets.REMOTE_USER }}
        REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
      run: |
        scp -r ./build ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:/home/${{ secrets.REMOTE_USER }}/build
        scp -r ./docker ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:/home/${{ secrets.REMOTE_USER }}/docker
        
    - name: Build site
      env:
        REMOTE_USER: ${{ secrets.REMOTE_USER }}
        REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        SECRET_PATH: ${{ secrets.SECRET_PATH }}
      run: |
        ssh ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} << 'EOF'
          cd /home/${{ secrets.REMOTE_USER }}/
          if ! command -v docker &> /dev/null
          then
            echo "Docker не найден, установка Docker..."
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io
            sudo systemctl start docker
            sudo systemctl enable docker
          else
            echo "Docker уже установлен. "
          fi
          sudo systemctl status docker || sudo systemctl start docker
          cd /home/${{ secrets.REMOTE_USER }}/docker/
          docker build -t svgsmsc-site .
          if [ $(docker ps -aq -f name=svgsmsc-site) ]; then
            docker stop svgsmsc-site
            docker rm svgsmsc-site
          fi
          docker run -d -p 80:80 -p 443:443 -v /home/${{ secrets.REMOTE_USER }}/build:/usr/share/nginx/html -v ${{ secrets.SECRET_PATH }}:/etc/letsencrypt/live/svgsmsc.com --name svgsmsc-site svgsmsc-site
          docker network create site_network
          docker run -d --network site_network -p 80:80 -p 443:443 --name svgsmsc-site svgsmsc-site
          docker exec svgsmsc-site nginx -s reload
        EOF